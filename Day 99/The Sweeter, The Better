#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int INF = 1e9;
vector<vector<int>> tree;
vector<int> sweetness;
int maxSweetness = -INF;

// DFS to compute maximum path sum
int dfs(int node) {
    if (node == -1) return 0;

    // Recursively compute left and right subtree max paths
    int leftSum = dfs(tree[node][0]);
    int rightSum = dfs(tree[node][1]);

    // Ignore negative paths (take max with 0)
    leftSum = max(0, leftSum);
    rightSum = max(0, rightSum);

    // Maximum sum using this node as the root
    maxSweetness = max(maxSweetness, sweetness[node] + leftSum + rightSum);

    // Return max single path (node + max subtree)
    return max(0, sweetness[node] + max(leftSum, rightSum));
}

int main() {
    int N;
    cin >> N;

    sweetness.resize(N);
    tree.assign(N, vector<int>(2, -1)); // Initialize tree with -1 (no children)

    for (int i = 0; i < N; i++) {
        cin >> sweetness[i]; // Read sweetness values
    }

    for (int i = 0; i < N; i++) {
        cin >> tree[i][0] >> tree[i][1]; // Read left and right child
        if (tree[i][0] != -1) tree[i][0]--; // Convert to 0-based index
        if (tree[i][1] != -1) tree[i][1]--; // Convert to 0-based index
    }

    // Start DFS from root (0-based index)
    dfs(0);

    // Output the maximum sweetness sum, ensuring at least 0
    cout << max(0, maxSweetness) << endl;
    return 0;
}
